{"version":3,"sources":["../node_modules/devextreme/ui/number_box.js","../node_modules/devextreme/ui/number_box/number_box.js","../node_modules/devextreme/ui/number_box/number_box.mask.js","../node_modules/devextreme/ui/number_box/number_box.caret.js","../node_modules/devextreme/ui/number_box/number_box.base.js","../node_modules/devextreme/ui/number_box/number_box.spins.js","../node_modules/devextreme/ui/number_box/number_box.spin.js"],"names":["module","exports","__webpack_require__","default","registerComponent","NumberBoxMask","eventsEngine","extend","isNumeric","browser","devices","fitIntoRange","inRange","escapeRegExp","number","maskCaret","getLDMLFormat","getFormat","NumberBoxBase","eventUtils","typeUtils","CARET_TIMEOUT_DURATION","msie","ensureDefined","value","defaultValue","inherit","_getDefaultOptions","this","callBase","useMaskBehavior","format","_isDeleteKey","key","_supportedKeys","_useMaskBehavior","minus","_revertSign","bind","del","_removeHandler","backspace","leftArrow","_arrowHandler","rightArrow","home","_moveCaretToBoundaryEventHandler","enter","_updateFormattedValue","end","_focusInHandler","e","clearCaretTimeout","_caretTimeout","setTimeout","caret","_caret","start","text","_getInputVal","decimalSeparator","getDecimalSeparator","decimalSeparatorIndex","indexOf","_focusOutHandler","_focusOutOccurs","_hasValueBeenChanged","inputValue","_getFormatPattern","option","_format","_parsedValue","_tryParse","_adjustParsedValue","_setTextByParsedValue","trigger","_input","step","nextCaret","getCaretWithOffset","isCaretInBoundaries","preventDefault","getCaretInBoundaries","_moveCaretToBoundary","direction","boundaries","getCaretBoundaries","newCaret","shiftKey","_shouldMoveCaret","isDecimalSeparatorNext","charAt","isZeroNext","moveToFloat","_lastKey","zeroToZeroReplace","convertDigits","val","_keyboardHandler","getChar","_lastKeyName","normalizeKeyName","_shouldHandleKey","originalEvent","normalizedText","enteredChar","newValue","_moveCaret","_keyPressHandler","isDeleteKey","isBackspaceKey","length","char","slice","_isStub","_replaceSelectedText","search","_isValueInRange","valueAfterRemoving","_isNonStubAfter","_isPercentFormat","replace","_parse","formatOption","isFunction","parser","parse","formatter","_getFormatForSign","signParts","split","sign","getSign","_removeStubs","excludeComma","thousandsSeparator","getThousandsSeparator","stubs","regExp","RegExp","_truncateToPrecision","maxPrecision","isDefined","strValue","toString","parsedValue","parseFloat","substr","isNaN","selection","editedText","isTextSelected","parsed","_getPrecisionLimits","max","isValueChanged","isDecimalPointRestricted","isUselessCharRestricted","_isValueIncomplete","point","pointIndex","isCaretOnFloat","textParts","floatLength","precision","isPrecisionInRange","min","endsWithZero","_setInputText","getCaretAfterFormat","_toggleEmptinessEventHandler","_formattedValue","_renderInputType","isNumberType","isMobileDevice","real","deviceType","_setInputType","_isChar","str","offset","adjustedCaret","keyName","isSpecialChar","ctrlKey","altKey","isMinusKey","_renderInput","_renderFormatter","_clearCache","_detachFormatterEvents","_attachFormatterEvents","off","$input","on","addNamespace","_formatValue","clearTimeout","_forceRefreshInputValue","index","isString","escapedDecimalSeparator","test","_parseValue","floatPart","_applyRevertedSign","preserveSelectedText","previousText","currentText","getCaretOffset","caretInBoundaries","_removeMinusFromText","formatted","textWithoutMinus","wasMinusRemoved","_renderDisplayText","apply","arguments","_renderValue","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","_optionValuesEqual","oldValue","_clean","map","join","prefixStubLength","exec","postfixStubLength","_getDigitCountBeforeIndex","_reverseText","reverse","_getDigitPositionByIndex","digitIndex","counter","result","pointPosition","newPointPosition","formattedParts","relativeIndex","digitsBefore","newPosition","positionFromEnd","digitsFromEnd","newPositionFromEnd","newPositionFromBegin","newText","previousBoundaries","$","domAdapter","commonUtils","mathUtils","inArray","TextEditor","SpinButtons","messageLocalization","Deferred","math","Math","FIREFOX_CONTROL_KEYS","upArrow","stopPropagation","_spinUpChangeHandler","downArrow","_spinDownChangeHandler","showSpinButtons","useLargeSpinButtons","mode","invalidValueMessage","buttons","_getDefaultButtons","concat","Ctor","_defaultOptionsRules","device","generic","isSimulator","options","platform","_initMarkup","_renderSubmitElement","$element","addClass","_renderContentImpl","_validateValue","setAria","_$submitElement","attr","appendTo","_setSubmitValue","applyServerDecimalSeparator","_getSubmitElement","metaKey","_keyPressed","_onMouseWheel","dxEvent","delta","_spinValueChange","Number","_forceValueRender","_updateButtons","resolve","formattedValue","_applyValueFormat","_renderProps","prop","valuemin","valuemax","_spinButtonsPointerDownHandler","getActiveElement","event","_normalizeInputValue","_correctRounding","regex","isFloatValue","isFloatStep","valueAccuracy","stepAccuracy","accuracy","_round","multiplier","pow","round","_renderValueChangeEvent","_normalizeText","valueHasDigits","_isValueValid","_applyValueBoundaries","validationRequest","fire","editor","isValueIncomplete","isValueCorrect","_replaceCommaWithPoint","_inputIsInvalid","isNumberMode","validityState","get","validity","badInput","_isNumber","isValueValid","isValid","isNumber","validationError","editorSpecific","message","trim","reset","_resumeValueChangeAction","Object","defineProperty","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","prototype","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","getter","call","_renderer2","_interopRequireDefault","_events_engine2","_button2","_number_box2","_utils","_pointer","_extend","obj","__esModule","_TextEditorButton","instance","TypeError","_classCallCheck","self","ReferenceError","_possibleConstructorReturn","__proto__","subClass","superClass","create","constructor","setPrototypeOf","_inherits","$spinContainer","eventName","down","NAME","$spinContainerChildren","children","pointerDownAction","_createAction","getInstance","eq","$spinUp","$spinDown","_getOptions","_addToContainer","_createComponent","_legacyRender","_isTouchFriendly","visible","_isVisible","disabled","$editor","isTouchFriendly","isVisible","toggleClass","$spinButtons","spinUp","spinDown","Widget","pointerEvents","feedbackEvents","holdEvent","POINTERUP_EVENT_NAME","up","POINTERCANCEL_EVENT_NAME","cancel","SpinButton","onChange","activeStateEnabled","hoverStateEnabled","SPIN_CLASS","_spinIcon","_render","_spinDownHandler","_spinChangeHandler","_createActionByOption","_clearTimer","_feedBackDeferred","lock","_holdTimer","setInterval","document","getDocument","_dispose","clearInterval","_invalidate"],"mappings":"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","file":"static/js/2.4f42f644.chunk.js","sourcesContent":["/**\r\n * DevExtreme (ui/number_box.js)\r\n * Version: 19.1.4\r\n * Build date: Mon Jun 17 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nmodule.exports = require(\"./number_box/number_box\");\nmodule.exports.default = module.exports;","/**\r\n * DevExtreme (ui/number_box/number_box.js)\r\n * Version: 19.1.4\r\n * Build date: Mon Jun 17 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar registerComponent = require(\"../../core/component_registrator\"),\n    NumberBoxMask = require(\"./number_box.mask\");\n\nregisterComponent(\"dxNumberBox\", NumberBoxMask);\nmodule.exports = NumberBoxMask;","/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 19.1.4\r\n * Build date: Mon Jun 17 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar eventsEngine = require(\"../../events/core/events_engine\"),\n    extend = require(\"../../core/utils/extend\").extend,\n    isNumeric = require(\"../../core/utils/type\").isNumeric,\n    browser = require(\"../../core/utils/browser\"),\n    devices = require(\"../../core/devices\"),\n    fitIntoRange = require(\"../../core/utils/math\").fitIntoRange,\n    inRange = require(\"../../core/utils/math\").inRange,\n    escapeRegExp = require(\"../../core/utils/common\").escapeRegExp,\n    number = require(\"../../localization/number\"),\n    maskCaret = require(\"./number_box.caret\"),\n    getLDMLFormat = require(\"../../localization/ldml/number\").getFormat,\n    NumberBoxBase = require(\"./number_box.base\"),\n    eventUtils = require(\"../../events/utils\"),\n    typeUtils = require(\"../../core/utils/type\");\n\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\",\n    MOVE_FORWARD = 1,\n    MOVE_BACKWARD = -1,\n    MINUS = \"-\",\n    MINUS_KEY = \"minus\",\n    NUMPUD_MINUS_KEY_IE = \"Subtract\",\n    INPUT_EVENT = \"input\";\nvar CARET_TIMEOUT_DURATION = browser.msie ? 300 : 0;\n\nvar ensureDefined = function ensureDefined(value, defaultValue) {\n  return void 0 === value ? defaultValue : value;\n};\n\nvar NumberBoxMask = NumberBoxBase.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      useMaskBehavior: true,\n      format: null\n    });\n  },\n  _isDeleteKey: function _isDeleteKey(key) {\n    return \"del\" === key;\n  },\n  _supportedKeys: function _supportedKeys() {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n\n    var that = this;\n    return extend(this.callBase(), {\n      minus: that._revertSign.bind(that),\n      del: that._removeHandler.bind(that),\n      backspace: that._removeHandler.bind(that),\n      leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\n      rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\n      home: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_FORWARD),\n      enter: that._updateFormattedValue.bind(that),\n      end: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_BACKWARD)\n    });\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    this.callBase(e);\n    this.clearCaretTimeout();\n    this._caretTimeout = setTimeout(function () {\n      this._caretTimeout = null;\n\n      var caret = this._caret();\n\n      if (caret.start === caret.end && this._useMaskBehavior()) {\n        var text = this._getInputVal(),\n            decimalSeparator = number.getDecimalSeparator(),\n            decimalSeparatorIndex = text.indexOf(decimalSeparator);\n\n        if (decimalSeparatorIndex >= 0) {\n          this._caret({\n            start: decimalSeparatorIndex,\n            end: decimalSeparatorIndex\n          });\n        } else {\n          this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e);\n        }\n      }\n    }.bind(this), CARET_TIMEOUT_DURATION);\n  },\n  _focusOutHandler: function _focusOutHandler(e) {\n    this._focusOutOccurs = true;\n\n    if (this._useMaskBehavior()) {\n      this._updateFormattedValue();\n    }\n\n    this.callBase(e);\n    this._focusOutOccurs = false;\n  },\n  _hasValueBeenChanged: function _hasValueBeenChanged(inputValue) {\n    var format = this._getFormatPattern(),\n        value = this.option(\"value\"),\n        formatted = this._format(value, format) || \"\";\n\n    return formatted !== inputValue;\n  },\n  _updateFormattedValue: function _updateFormattedValue() {\n    var inputValue = this._getInputVal();\n\n    if (this._hasValueBeenChanged(inputValue)) {\n      this._parsedValue = this._tryParse(inputValue, this._caret());\n\n      this._adjustParsedValue();\n\n      this._setTextByParsedValue();\n\n      if (this._parsedValue !== this.option(\"value\")) {\n        eventsEngine.trigger(this._input(), \"change\");\n      }\n    }\n  },\n  _arrowHandler: function _arrowHandler(step, e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var text = this._getInputVal(),\n        format = this._getFormatPattern(),\n        nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\n\n    if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\n      nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\n      e.preventDefault();\n\n      this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format));\n    }\n  },\n  _moveCaretToBoundary: function _moveCaretToBoundary(direction) {\n    var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern()),\n        newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\n\n    this._caret(newCaret);\n  },\n  _moveCaretToBoundaryEventHandler: function _moveCaretToBoundaryEventHandler(direction, e) {\n    if (!this._useMaskBehavior() || e && e.shiftKey) {\n      return;\n    }\n\n    this._moveCaretToBoundary(direction);\n\n    e && e.preventDefault();\n  },\n  _shouldMoveCaret: function _shouldMoveCaret(text, caret) {\n    var decimalSeparator = number.getDecimalSeparator(),\n        isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator,\n        isZeroNext = \"0\" === text.charAt(caret.end),\n        moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey) && isDecimalSeparatorNext,\n        zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\n    return moveToFloat || zeroToZeroReplace;\n  },\n  _getInputVal: function _getInputVal() {\n    return number.convertDigits(this._input().val(), true);\n  },\n  _keyboardHandler: function _keyboardHandler(e) {\n    this.clearCaretTimeout();\n    this._lastKey = number.convertDigits(eventUtils.getChar(e), true);\n    this._lastKeyName = eventUtils.normalizeKeyName(e);\n\n    if (!this._shouldHandleKey(e.originalEvent)) {\n      return this.callBase(e);\n    }\n\n    var normalizedText = this._getInputVal(),\n        caret = this._caret();\n\n    var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey,\n        newValue = this._tryParse(normalizedText, caret, enteredChar);\n\n    if (void 0 === newValue) {\n      if (this._lastKeyName !== MINUS_KEY) {\n        e.originalEvent.preventDefault();\n      }\n\n      if (this._shouldMoveCaret(normalizedText, caret)) {\n        this._moveCaret(1);\n      }\n    } else {\n      this._parsedValue = newValue;\n    }\n\n    return this.callBase(e);\n  },\n  _keyPressHandler: function _keyPressHandler(e) {\n    if (!this._useMaskBehavior()) {\n      this.callBase(e);\n    }\n  },\n  _removeHandler: function _removeHandler(e) {\n    var caret = this._caret(),\n        text = this._getInputVal(),\n        start = caret.start,\n        end = caret.end;\n\n    this._lastKey = eventUtils.getChar(e);\n    this._lastKeyName = eventUtils.normalizeKeyName(e);\n\n    var isDeleteKey = this._isDeleteKey(this._lastKeyName);\n\n    var isBackspaceKey = !isDeleteKey;\n\n    if (start === end) {\n      var caretPosition = start;\n      var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\n\n      if (canDelete) {\n        isDeleteKey && end++;\n        isBackspaceKey && start--;\n      } else {\n        e.preventDefault();\n        return;\n      }\n    }\n\n    var char = text.slice(start, end);\n\n    if (this._isStub(char)) {\n      this._moveCaret(isDeleteKey ? 1 : -1);\n\n      if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\n        this._revertSign(e);\n\n        this._setTextByParsedValue();\n      }\n\n      e.preventDefault();\n      return;\n    }\n\n    var decimalSeparator = number.getDecimalSeparator();\n\n    if (char === decimalSeparator) {\n      var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n\n      if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\n        this._moveCaret(isDeleteKey ? 1 : -1);\n\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    if (end - start < text.length) {\n      var editedText = this._replaceSelectedText(text, {\n        start: start,\n        end: end\n      }, \"\"),\n          noDigits = editedText.search(/[0-9]/) < 0;\n\n      if (noDigits && this._isValueInRange(0)) {\n        this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\n        return;\n      }\n    }\n\n    var valueAfterRemoving = this._tryParse(text, {\n      start: start,\n      end: end\n    }, \"\");\n\n    if (void 0 === valueAfterRemoving) {\n      e.preventDefault();\n    } else {\n      this._parsedValue = valueAfterRemoving;\n    }\n  },\n  _isPercentFormat: function _isPercentFormat() {\n    var format = this._getFormatPattern(),\n        noEscapedFormat = format.replace(/'[^']+'/g, \"\");\n\n    return noEscapedFormat.indexOf(\"%\") !== -1;\n  },\n  _parse: function _parse(text, format) {\n    var formatOption = this.option(\"format\"),\n        isCustomParser = typeUtils.isFunction(formatOption.parser),\n        parser = isCustomParser ? formatOption.parser : number.parse;\n    return parser(text, format);\n  },\n  _format: function _format(value, format) {\n    var formatOption = this.option(\"format\"),\n        isCustomFormatter = typeUtils.isFunction(formatOption.formatter),\n        formatter = isCustomFormatter ? formatOption.formatter : number.format;\n    return formatter(value, format);\n  },\n  _getFormatPattern: function _getFormatPattern() {\n    var format = this.option(\"format\"),\n        isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\n\n    if (isLDMLPattern) {\n      return format;\n    } else {\n      return getLDMLFormat(function (value) {\n        var text = this._format(value, format);\n\n        return number.convertDigits(text, true);\n      }.bind(this));\n    }\n  },\n  _getFormatForSign: function _getFormatForSign(text) {\n    var format = this._getFormatPattern(),\n        signParts = format.split(\";\"),\n        sign = number.getSign(text, format);\n\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\n    return sign < 0 ? signParts[1] : signParts[0];\n  },\n  _removeStubs: function _removeStubs(text, excludeComma) {\n    var format = this._getFormatForSign(text),\n        thousandsSeparator = number.getThousandsSeparator(),\n        stubs = format.replace(/[#0.,]/g, \"\"),\n        regExp = new RegExp(\"[-\" + escapeRegExp((excludeComma ? \"\" : thousandsSeparator) + stubs) + \"]\", \"g\");\n\n    return text.replace(regExp, \"\");\n  },\n  _truncateToPrecision: function _truncateToPrecision(value, maxPrecision) {\n    if (typeUtils.isDefined(value)) {\n      var strValue = value.toString(),\n          decimalSeparatorIndex = strValue.indexOf(\".\");\n\n      if (strValue && decimalSeparatorIndex > -1) {\n        var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\n        return isNaN(parsedValue) ? value : parsedValue;\n      }\n    }\n\n    return value;\n  },\n  _tryParse: function _tryParse(text, selection, char) {\n    var editedText = this._replaceSelectedText(text, selection, char),\n        format = this._getFormatPattern(),\n        isTextSelected = selection.start !== selection.end,\n        parsed = this._parse(editedText, format),\n        maxPrecision = this._getPrecisionLimits(format, editedText).max,\n        isValueChanged = parsed !== this._parsedValue,\n        decimalSeparator = number.getDecimalSeparator();\n\n    var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision,\n        isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\n\n    if (isDecimalPointRestricted || isUselessCharRestricted) {\n      return;\n    }\n\n    if (\"\" === this._removeStubs(editedText)) {\n      parsed = 0 * this._parsedValue;\n    }\n\n    if (isNaN(parsed)) {\n      return;\n    }\n\n    var value = null === parsed ? this._parsedValue : parsed;\n    parsed = this._truncateToPrecision(value, maxPrecision);\n    return this._isPercentFormat() ? parsed && parsed / 100 : parsed;\n  },\n  _isValueIncomplete: function _isValueIncomplete(text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    var caret = this._caret(),\n        point = number.getDecimalSeparator(),\n        pointIndex = text.indexOf(point),\n        isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start,\n        textParts = this._removeStubs(text, true).split(point);\n\n    if (!isCaretOnFloat || 2 !== textParts.length) {\n      return false;\n    }\n\n    var floatLength = textParts[1].length,\n        precision = this._getPrecisionLimits(this._getFormatPattern(), text),\n        isPrecisionInRange = inRange(floatLength, precision.min, precision.max),\n        endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\n\n    return isPrecisionInRange && (endsWithZero || !floatLength);\n  },\n  _isValueInRange: function _isValueInRange(value) {\n    var min = ensureDefined(this.option(\"min\"), -(1 / 0)),\n        max = ensureDefined(this.option(\"max\"), 1 / 0);\n    return inRange(value, min, max);\n  },\n  _setInputText: function _setInputText(text) {\n    var normalizedText = number.convertDigits(text, true),\n        newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\n\n    this._input().val(text);\n\n    this._toggleEmptinessEventHandler();\n\n    this._formattedValue = text;\n\n    if (!this._focusOutOccurs) {\n      this._caret(newCaret);\n    }\n  },\n  _useMaskBehavior: function _useMaskBehavior() {\n    return !!this.option(\"format\") && this.option(\"useMaskBehavior\");\n  },\n  _renderInputType: function _renderInputType() {\n    var isNumberType = \"number\" === this.option(\"mode\"),\n        isMobileDevice = \"desktop\" !== devices.real().deviceType;\n\n    if (this._useMaskBehavior() && isNumberType) {\n      this._setInputType(isMobileDevice ? \"tel\" : \"text\");\n    } else {\n      this.callBase();\n    }\n  },\n  _isChar: function _isChar(str) {\n    return \"string\" === typeof str && 1 === str.length;\n  },\n  _moveCaret: function _moveCaret(offset) {\n    if (!offset) {\n      return;\n    }\n\n    var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset),\n        adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\n\n    this._caret(adjustedCaret);\n  },\n  _shouldHandleKey: function _shouldHandleKey(e) {\n    var keyName = eventUtils.normalizeKeyName(e),\n        isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(keyName),\n        isMinusKey = keyName === MINUS_KEY,\n        useMaskBehavior = this._useMaskBehavior();\n\n    return useMaskBehavior && !isSpecialChar && !isMinusKey;\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._renderFormatter();\n  },\n  _renderFormatter: function _renderFormatter() {\n    this._clearCache();\n\n    this._detachFormatterEvents();\n\n    if (this._useMaskBehavior()) {\n      this._attachFormatterEvents();\n    }\n  },\n  _detachFormatterEvents: function _detachFormatterEvents() {\n    eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE);\n  },\n  _attachFormatterEvents: function _attachFormatterEvents() {\n    var $input = this._input();\n\n    eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), this._formatValue.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function () {\n      if (!this._caretTimeout) {\n        this._caretTimeout = setTimeout(function () {\n          this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()));\n        }.bind(this), CARET_TIMEOUT_DURATION);\n      }\n    }.bind(this));\n    eventsEngine.on($input, \"dxdblclick\", function () {\n      this.clearCaretTimeout();\n    }.bind(this));\n  },\n  clearCaretTimeout: function clearCaretTimeout() {\n    clearTimeout(this._caretTimeout);\n    this._caretTimeout = null;\n  },\n  _forceRefreshInputValue: function _forceRefreshInputValue() {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n  },\n  _isNonStubAfter: function _isNonStubAfter(index, text) {\n    text = (text || this._getInputVal()).slice(index);\n    return text && !this._isStub(text, true);\n  },\n  _isStub: function _isStub(str, isString) {\n    var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator()),\n        regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\",\n        stubRegExp = new RegExp(regExpString, \"g\");\n    return stubRegExp.test(str) && (isString || this._isChar(str));\n  },\n  _parseValue: function _parseValue(text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    return this._parsedValue;\n  },\n  _getPrecisionLimits: function _getPrecisionLimits(text) {\n    var currentFormat = this._getFormatForSign(text),\n        floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\"),\n        minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length,\n        maxPrecision = floatPart.length;\n\n    return {\n      min: minPrecision,\n      max: maxPrecision\n    };\n  },\n  _revertSign: function _revertSign(e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var caret = this._caret();\n\n    if (caret.start !== caret.end) {\n      if (eventUtils.normalizeKeyName(e) === MINUS_KEY) {\n        this._applyRevertedSign(e, caret, true);\n\n        return;\n      } else {\n        this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()));\n      }\n    }\n\n    this._applyRevertedSign(e, caret);\n  },\n  _applyRevertedSign: function _applyRevertedSign(e, caret, preserveSelectedText) {\n    var newValue = -1 * ensureDefined(this._parsedValue, null);\n\n    if (this._isValueInRange(newValue)) {\n      this._parsedValue = newValue;\n\n      if (preserveSelectedText) {\n        var format = this._getFormatPattern(),\n            previousText = this._getInputVal();\n\n        this._setTextByParsedValue();\n\n        e.preventDefault();\n\n        var currentText = this._getInputVal(),\n            offset = maskCaret.getCaretOffset(previousText, currentText, format);\n\n        caret = maskCaret.getCaretWithOffset(caret, offset);\n        var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\n\n        if (browser.msie) {\n          clearTimeout(this._caretTimeout);\n          this._caretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries));\n        } else {\n          this._caret(caretInBoundaries);\n        }\n      }\n\n      if (e.key === NUMPUD_MINUS_KEY_IE) {\n        eventsEngine.trigger(this._input(), INPUT_EVENT);\n      }\n    }\n  },\n  _removeMinusFromText: function _removeMinusFromText(text, caret) {\n    var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\n    return isMinusPressed ? this._replaceSelectedText(text, {\n      start: caret.start - 1,\n      end: caret.start\n    }, \"\") : text;\n  },\n  _setTextByParsedValue: function _setTextByParsedValue() {\n    var format = this._getFormatPattern(),\n        parsed = this._parseValue(),\n        formatted = this._format(parsed, format) || \"\";\n\n    this._setInputText(formatted);\n  },\n  _formatValue: function _formatValue() {\n    var normalizedText = this._getInputVal(),\n        caret = this._caret(),\n        textWithoutMinus = this._removeMinusFromText(normalizedText, caret),\n        wasMinusRemoved = textWithoutMinus !== normalizedText;\n\n    normalizedText = textWithoutMinus;\n\n    if (this._isValueIncomplete(textWithoutMinus)) {\n      this._formattedValue = normalizedText;\n\n      if (wasMinusRemoved) {\n        this._setTextByParsedValue();\n      }\n\n      return;\n    }\n\n    var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\n\n    if (textWasChanged) {\n      var value = this._tryParse(normalizedText, caret, \"\");\n\n      if (typeUtils.isDefined(value)) {\n        this._parsedValue = value;\n      }\n    }\n\n    this._setTextByParsedValue();\n  },\n  _renderDisplayText: function _renderDisplayText() {\n    if (this._useMaskBehavior()) {\n      this._toggleEmptinessEventHandler();\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (this._useMaskBehavior()) {\n      this._parsedValue = this.option(\"value\");\n\n      this._setTextByParsedValue();\n    }\n\n    return this.callBase();\n  },\n  _adjustParsedValue: function _adjustParsedValue() {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var clearedText = this._removeStubs(this._getInputVal()),\n        parsedValue = clearedText ? this._parseValue() : null;\n\n    if (!isNumeric(parsedValue)) {\n      this._parsedValue = parsedValue;\n      return;\n    }\n\n    this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"));\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(e);\n    }\n\n    this._saveValueChangeEvent(e);\n\n    this._lastKey = null;\n    this._lastKeyName = null;\n\n    this._adjustParsedValue();\n\n    this.option(\"value\", this._parsedValue);\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"format\":\n      case \"useMaskBehavior\":\n        this._renderFormatter();\n\n        this._renderValue();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._adjustParsedValue();\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _optionValuesEqual: function _optionValuesEqual(name, oldValue, newValue) {\n    if (\"value\" === name && 0 === oldValue && 0 === newValue) {\n      return 1 / oldValue === 1 / newValue;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _clearCache: function _clearCache() {\n    delete this._formattedValue;\n    delete this._lastKey;\n    delete this._lastKeyName;\n    delete this._parsedValue;\n    delete this._focusOutOccurs;\n    clearTimeout(this._caretTimeout);\n    delete this._caretTimeout;\n  },\n  _clean: function _clean() {\n    this._clearCache();\n\n    this.callBase();\n  }\n});\nmodule.exports = NumberBoxMask;","/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 19.1.4\r\n * Build date: Mon Jun 17 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar fitIntoRange = require(\"../../core/utils/math\").fitIntoRange,\n    escapeRegExp = require(\"../../core/utils/common\").escapeRegExp,\n    number = require(\"../../localization/number\");\n\nvar getCaretBoundaries = function getCaretBoundaries(text, format) {\n  var signParts = format.split(\";\");\n  var sign = number.getSign(text, format);\n  signParts[1] = signParts[1] || \"-\" + signParts[0];\n  format = signParts[sign < 0 ? 1 : 0];\n\n  var mockEscapedStubs = function mockEscapedStubs(str) {\n    return str.replace(/'([^']*)'/g, function (str) {\n      return str.split(\"\").map(function () {\n        return \" \";\n      }).join(\"\").substr(2);\n    });\n  };\n\n  format = mockEscapedStubs(format);\n  var prefixStubLength = /^[^#0.,]*/.exec(format)[0].length;\n  var postfixStubLength = /[^#0.,]*$/.exec(format)[0].length;\n  return {\n    start: prefixStubLength,\n    end: text.length - postfixStubLength\n  };\n};\n\nvar _getDigitCountBeforeIndex = function _getDigitCountBeforeIndex(index, text) {\n  var decimalSeparator = number.getDecimalSeparator(),\n      regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\"),\n      textBeforePosition = text.slice(0, index);\n  return textBeforePosition.replace(regExp, \"\").length;\n};\n\nvar _reverseText = function _reverseText(text) {\n  return text.split(\"\").reverse().join(\"\");\n};\n\nvar _getDigitPositionByIndex = function _getDigitPositionByIndex(digitIndex, text) {\n  if (!digitIndex) {\n    return -1;\n  }\n\n  var regExp = /[0-9]/g,\n      counter = 1,\n      index = null,\n      result = regExp.exec(text);\n\n  while (result) {\n    index = result.index;\n\n    if (!digitIndex || counter >= digitIndex) {\n      return index;\n    }\n\n    counter++;\n    result = regExp.exec(text);\n  }\n\n  return null === index ? text.length : index;\n};\n\nvar getCaretWithOffset = function getCaretWithOffset(caret, offset) {\n  if (void 0 === caret.start) {\n    caret = {\n      start: caret,\n      end: caret\n    };\n  }\n\n  return {\n    start: caret.start + offset,\n    end: caret.end + offset\n  };\n};\n\nvar getCaretAfterFormat = function getCaretAfterFormat(text, formatted, caret, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var point = number.getDecimalSeparator(),\n      pointPosition = text.indexOf(point),\n      newPointPosition = formatted.indexOf(point),\n      textParts = text.split(point),\n      formattedParts = formatted.split(point),\n      isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\n\n  if (isCaretOnFloat) {\n    var relativeIndex = caret.start - pointPosition - 1,\n        digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]),\n        newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\n\n    return getCaretInBoundaries(newPosition, formatted, format);\n  } else {\n    var positionFromEnd = textParts[0].length - caret.start,\n        digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0])),\n        newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedParts[0])),\n        newPositionFromBegin = formattedParts[0].length - (newPositionFromEnd + 1);\n\n    return getCaretInBoundaries(newPositionFromBegin, formatted, format);\n  }\n};\n\nvar isCaretInBoundaries = function isCaretInBoundaries(caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretInBoundaries(caret, text, format);\n  return caret.start >= boundaries.start && caret.end <= boundaries.end;\n};\n\nvar getCaretInBoundaries = function getCaretInBoundaries(caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretBoundaries(text, format),\n      adjustedCaret = {\n    start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\n    end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\n  };\n  return adjustedCaret;\n};\n\nvar getCaretOffset = function getCaretOffset(previousText, newText, format) {\n  var previousBoundaries = getCaretBoundaries(previousText, format),\n      newBoundaries = getCaretBoundaries(newText, format);\n  return newBoundaries.start - previousBoundaries.start;\n};\n\nexports.getCaretBoundaries = getCaretBoundaries;\nexports.isCaretInBoundaries = isCaretInBoundaries;\nexports.getCaretWithOffset = getCaretWithOffset;\nexports.getCaretInBoundaries = getCaretInBoundaries;\nexports.getCaretAfterFormat = getCaretAfterFormat;\nexports.getCaretOffset = getCaretOffset;","/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 19.1.4\r\n * Build date: Mon Jun 17 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    domAdapter = require(\"../../core/dom_adapter\"),\n    eventsEngine = require(\"../../events/core/events_engine\"),\n    commonUtils = require(\"../../core/utils/common\"),\n    mathUtils = require(\"../../core/utils/math\"),\n    extend = require(\"../../core/utils/extend\").extend,\n    inArray = require(\"../../core/utils/array\").inArray,\n    devices = require(\"../../core/devices\"),\n    TextEditor = require(\"../text_box/ui.text_editor\"),\n    eventUtils = require(\"../../events/utils\"),\n    SpinButtons = require(\"./number_box.spins\").default,\n    messageLocalization = require(\"../../localization/message\"),\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar math = Math;\nvar WIDGET_CLASS = \"dx-numberbox\";\nvar FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\nvar NumberBoxBase = TextEditor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend(this.callBase(), {\n      upArrow: function upArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._spinUpChangeHandler(e);\n      },\n      downArrow: function downArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._spinDownChangeHandler(e);\n      },\n      enter: function enter() {}\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: 0,\n      min: void 0,\n      max: void 0,\n      step: 1,\n      showSpinButtons: false,\n      useLargeSpinButtons: true,\n      mode: \"text\",\n      invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\n      buttons: void 0\n    });\n  },\n  _getDefaultButtons: function _getDefaultButtons() {\n    return this.callBase().concat([{\n      name: \"spins\",\n      Ctor: SpinButtons\n    }]);\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return devices.real().generic && !devices.isSimulator();\n      },\n      options: {\n        useLargeSpinButtons: false\n      }\n    }, {\n      device: function device() {\n        return \"generic\" !== devices.real().platform;\n      },\n      options: {\n        mode: \"number\"\n      }\n    }]);\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSubmitElement();\n\n    this.$element().addClass(WIDGET_CLASS);\n    this.callBase();\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\n    this.setAria(\"role\", \"spinbutton\");\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n\n    this._setSubmitValue(this.option(\"value\"));\n  },\n  _setSubmitValue: function _setSubmitValue(value) {\n    this._$submitElement.val(commonUtils.applyServerDecimalSeparator(value));\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._$submitElement;\n  },\n  _keyPressHandler: function _keyPressHandler(e) {\n    this.callBase(e);\n    var char = eventUtils.getChar(e),\n        validCharRegExp = /[\\d.,eE\\-+]|Subtract/,\n        isInputCharValid = validCharRegExp.test(char);\n\n    if (!isInputCharValid) {\n      var keyName = eventUtils.normalizeKeyName(e);\n\n      if (e.metaKey || e.ctrlKey || keyName && inArray(keyName, FIREFOX_CONTROL_KEYS) >= 0) {\n        return;\n      }\n\n      e.preventDefault();\n      return false;\n    }\n\n    this._keyPressed = true;\n  },\n  _onMouseWheel: function _onMouseWheel(dxEvent) {\n    dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);\n  },\n  _renderValue: function _renderValue() {\n    var inputValue = this._input().val();\n\n    if (!inputValue.length || Number(inputValue) !== this.option(\"value\")) {\n      this._forceValueRender();\n\n      this._toggleEmptinessEventHandler();\n    }\n\n    var value = this.option(\"value\");\n    this.setAria(\"valuenow\", value);\n    this.option(\"text\", this._input().val());\n\n    this._updateButtons();\n\n    return new Deferred().resolve();\n  },\n  _forceValueRender: function _forceValueRender() {\n    var value = this.option(\"value\"),\n        number = Number(value),\n        formattedValue = isNaN(number) ? \"\" : this._applyValueFormat(value);\n\n    this._renderDisplayText(formattedValue);\n  },\n  _applyValueFormat: function _applyValueFormat(value) {\n    return this.option(\"valueFormat\")(value);\n  },\n  _renderProps: function _renderProps() {\n    this.callBase();\n\n    this._input().prop({\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      step: this.option(\"step\")\n    });\n\n    this.setAria({\n      valuemin: this.option(\"min\") || \"undefined\",\n      valuemax: this.option(\"max\") || \"undefined\"\n    });\n  },\n  _spinButtonsPointerDownHandler: function _spinButtonsPointerDownHandler() {\n    var $input = this._input();\n\n    if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\n      eventsEngine.trigger($input, \"focus\");\n    }\n  },\n  _spinUpChangeHandler: function _spinUpChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(1, e.event || e);\n    }\n  },\n  _spinDownChangeHandler: function _spinDownChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(-1, e.event || e);\n    }\n  },\n  _spinValueChange: function _spinValueChange(sign, dxEvent) {\n    var step = parseFloat(this.option(\"step\"));\n\n    if (0 === step) {\n      return;\n    }\n\n    var value = parseFloat(this._normalizeInputValue()) || 0;\n    value = this._correctRounding(value, step * sign);\n    var min = this.option(\"min\"),\n        max = this.option(\"max\");\n\n    if (void 0 !== min) {\n      value = Math.max(min, value);\n    }\n\n    if (void 0 !== max) {\n      value = Math.min(max, value);\n    }\n\n    this._saveValueChangeEvent(dxEvent);\n\n    this.option(\"value\", value);\n  },\n  _correctRounding: function _correctRounding(value, step) {\n    var regex = /[,.](.*)/;\n    var isFloatValue = regex.test(value),\n        isFloatStep = regex.test(step);\n\n    if (isFloatValue || isFloatStep) {\n      var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0,\n          stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0,\n          accuracy = math.max(valueAccuracy, stepAccuracy);\n      value = this._round(value + step, accuracy);\n      return value;\n    }\n\n    return value + step;\n  },\n  _round: function _round(value, precision) {\n    precision = precision || 0;\n    var multiplier = Math.pow(10, precision);\n    value *= multiplier;\n    value = Math.round(value) / multiplier;\n    return value;\n  },\n  _renderValueChangeEvent: function _renderValueChangeEvent() {\n    this.callBase();\n    eventsEngine.on(this._input(), \"focusout\", this._forceRefreshInputValue.bind(this));\n  },\n  _forceRefreshInputValue: function _forceRefreshInputValue() {\n    if (\"number\" === this.option(\"mode\")) {\n      return;\n    }\n\n    var $input = this._input(),\n        formattedValue = this._applyValueFormat(this.option(\"value\"));\n\n    $input.val(null);\n    $input.val(formattedValue);\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    var $input = this._input(),\n        inputValue = this._normalizeText(),\n        value = this._parseValue(inputValue),\n        valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\n\n    if (this._isValueValid() && !this._validateValue(value)) {\n      $input.val(this._applyValueFormat(value));\n      return;\n    }\n\n    if (valueHasDigits) {\n      this.callBase(e, isNaN(value) ? null : value);\n    }\n\n    this._applyValueBoundaries(inputValue, value);\n\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n  },\n  _applyValueBoundaries: function _applyValueBoundaries(inputValue, parsedValue) {\n    var isValueIncomplete = this._isValueIncomplete(inputValue),\n        isValueCorrect = this._isValueInRange(inputValue);\n\n    if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\n      if (Number(inputValue) !== parsedValue) {\n        this._input().val(this._applyValueFormat(parsedValue));\n      }\n    }\n  },\n  _replaceCommaWithPoint: function _replaceCommaWithPoint(value) {\n    return value.replace(\",\", \".\");\n  },\n  _inputIsInvalid: function _inputIsInvalid() {\n    var isNumberMode = \"number\" === this.option(\"mode\");\n\n    var validityState = this._input().get(0).validity;\n\n    return isNumberMode && validityState && validityState.badInput;\n  },\n  _renderDisplayText: function _renderDisplayText(text) {\n    if (this._inputIsInvalid()) {\n      return;\n    }\n\n    this.callBase(text);\n  },\n  _isValueIncomplete: function _isValueIncomplete(value) {\n    var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\n    return incompleteRegex.test(value);\n  },\n  _isValueInRange: function _isValueInRange(value) {\n    return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"));\n  },\n  _isNumber: function _isNumber(value) {\n    return null !== this._parseValue(value);\n  },\n  _validateValue: function _validateValue(value) {\n    var inputValue = this._normalizeText(),\n        isValueValid = this._isValueValid(),\n        isValid = true,\n        isNumber = this._isNumber(inputValue);\n\n    if (isNaN(Number(value))) {\n      isValid = false;\n    }\n\n    if (!value && isValueValid) {\n      isValid = true;\n    } else {\n      if (!isNumber && !isValueValid) {\n        isValid = false;\n      }\n    }\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"invalidValueMessage\")\n      }\n    });\n    return isValid;\n  },\n  _normalizeInputValue: function _normalizeInputValue() {\n    return this._parseValue(this._normalizeText());\n  },\n  _normalizeText: function _normalizeText() {\n    var value = this._input().val().trim();\n\n    return this._replaceCommaWithPoint(value);\n  },\n  _parseValue: function _parseValue(value) {\n    var number = parseFloat(value);\n\n    if (isNaN(number)) {\n      return null;\n    }\n\n    return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"));\n  },\n  reset: function reset() {\n    if (null === this.option(\"value\")) {\n      this.option(\"text\", \"\");\n\n      this._renderValue();\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        this._validateValue(args.value);\n\n        this._setSubmitValue(args.value);\n\n        this.callBase(args);\n\n        this._resumeValueChangeAction();\n\n        break;\n\n      case \"step\":\n        this._renderProps();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._renderProps();\n\n        this.option(\"value\", this._parseValue(this.option(\"value\")));\n        break;\n\n      case \"showSpinButtons\":\n      case \"useLargeSpinButtons\":\n        this._updateButtons([\"spins\"]);\n\n        break;\n\n      case \"invalidValueMessage\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = NumberBoxBase;","/**\r\n * DevExtreme (ui/number_box/number_box.spins.js)\r\n * Version: 19.1.4\r\n * Build date: Mon Jun 17 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (void 0 === getter) {\n        return;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _button = require(\"../text_box/texteditor_button_collection/button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _number_box = require(\"./number_box.spin\");\n\nvar _number_box2 = _interopRequireDefault(_number_box);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\n\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\";\nvar SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\n\nvar SpinButtons = function (_TextEditorButton) {\n  _inherits(SpinButtons, _TextEditorButton);\n\n  function SpinButtons() {\n    _classCallCheck(this, SpinButtons);\n\n    return _possibleConstructorReturn(this, (SpinButtons.__proto__ || Object.getPrototypeOf(SpinButtons)).apply(this, arguments));\n  }\n\n  _createClass(SpinButtons, [{\n    key: \"_attachEvents\",\n    value: function value(instance, $spinContainer) {\n      var editor = this.editor;\n      var eventName = (0, _utils.addNamespace)(_pointer.down, editor.NAME);\n      var $spinContainerChildren = $spinContainer.children();\n\n      var pointerDownAction = editor._createAction(function (e) {\n        return editor._spinButtonsPointerDownHandler(e);\n      });\n\n      _events_engine2.default.off($spinContainer, eventName);\n\n      _events_engine2.default.on($spinContainer, eventName, function (e) {\n        return pointerDownAction({\n          event: e\n        });\n      });\n\n      _number_box2.default.getInstance($spinContainerChildren.eq(0)).option(\"onChange\", function (e) {\n        return editor._spinUpChangeHandler(e);\n      });\n\n      _number_box2.default.getInstance($spinContainerChildren.eq(1)).option(\"onChange\", function (e) {\n        return editor._spinDownChangeHandler(e);\n      });\n    }\n  }, {\n    key: \"_create\",\n    value: function value() {\n      var editor = this.editor;\n      var $spinContainer = (0, _renderer2.default)(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\n      var $spinUp = (0, _renderer2.default)(\"<div>\").appendTo($spinContainer);\n      var $spinDown = (0, _renderer2.default)(\"<div>\").appendTo($spinContainer);\n\n      var options = this._getOptions();\n\n      this._addToContainer($spinContainer);\n\n      editor._createComponent($spinUp, _number_box2.default, (0, _extend.extend)({\n        direction: \"up\"\n      }, options));\n\n      editor._createComponent($spinDown, _number_box2.default, (0, _extend.extend)({\n        direction: \"down\"\n      }, options));\n\n      this._legacyRender(editor.$element(), this._isTouchFriendly(), options.visible);\n\n      return {\n        instance: $spinContainer,\n        $element: $spinContainer\n      };\n    }\n  }, {\n    key: \"_getOptions\",\n    value: function value() {\n      var editor = this.editor;\n\n      var visible = this._isVisible();\n\n      var disabled = editor.option(\"disabled\");\n      return {\n        visible: visible,\n        disabled: disabled\n      };\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function value() {\n      var editor = this.editor;\n      return _get(SpinButtons.prototype.__proto__ || Object.getPrototypeOf(SpinButtons.prototype), \"_isVisible\", this).call(this) && editor.option(\"showSpinButtons\");\n    }\n  }, {\n    key: \"_isTouchFriendly\",\n    value: function value() {\n      var editor = this.editor;\n      return editor.option(\"showSpinButtons\") && editor.option(\"useLargeSpinButtons\");\n    }\n  }, {\n    key: \"_legacyRender\",\n    value: function value($editor, isTouchFriendly, isVisible) {\n      $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);\n      $editor.toggleClass(SPIN_CLASS, isVisible);\n    }\n  }, {\n    key: \"update\",\n    value: function value() {\n      var shouldUpdate = _get(SpinButtons.prototype.__proto__ || Object.getPrototypeOf(SpinButtons.prototype), \"update\", this).call(this);\n\n      if (shouldUpdate) {\n        var editor = this.editor,\n            instance = this.instance;\n        var $editor = editor.$element();\n\n        var isVisible = this._isVisible();\n\n        var isTouchFriendly = this._isTouchFriendly();\n\n        var $spinButtons = instance.children();\n\n        var spinUp = _number_box2.default.getInstance($spinButtons.eq(0));\n\n        var spinDown = _number_box2.default.getInstance($spinButtons.eq(1));\n\n        var options = this._getOptions();\n\n        spinUp.option(options);\n        spinDown.option(options);\n\n        this._legacyRender($editor, isTouchFriendly, isVisible);\n      }\n    }\n  }]);\n\n  return SpinButtons;\n}(_button2.default);\n\nexports.default = SpinButtons;","/**\r\n * DevExtreme (ui/number_box/number_box.spin.js)\r\n * Version: 19.1.4\r\n * Build date: Mon Jun 17 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    domAdapter = require(\"../../core/dom_adapter\"),\n    eventsEngine = require(\"../../events/core/events_engine\"),\n    Widget = require(\"../widget/ui.widget\"),\n    extend = require(\"../../core/utils/extend\").extend,\n    eventUtils = require(\"../../events/utils\"),\n    pointerEvents = require(\"../../events/pointer\"),\n    feedbackEvents = require(\"../../events/core/emitter.feedback\"),\n    holdEvent = require(\"../../events/hold\"),\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar SPIN_CLASS = \"dx-numberbox-spin\",\n    SPIN_BUTTON_CLASS = \"dx-numberbox-spin-button\",\n    SPIN_HOLD_DELAY = 100,\n    NUMBER_BOX = \"dxNumberBox\",\n    POINTERUP_EVENT_NAME = eventUtils.addNamespace(pointerEvents.up, NUMBER_BOX),\n    POINTERCANCEL_EVENT_NAME = eventUtils.addNamespace(pointerEvents.cancel, NUMBER_BOX);\nvar SpinButton = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      direction: \"up\",\n      onChange: null,\n      activeStateEnabled: true,\n      hoverStateEnabled: true\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    var direction = SPIN_CLASS + \"-\" + this.option(\"direction\");\n    this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);\n    this._spinIcon = $(\"<div>\").addClass(direction + \"-icon\").appendTo(this.$element());\n  },\n  _render: function _render() {\n    this.callBase();\n    var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME),\n        $element = this.$element();\n    eventsEngine.off($element, eventName);\n    eventsEngine.on($element, eventName, this._spinDownHandler.bind(this));\n    this._spinChangeHandler = this._createActionByOption(\"onChange\");\n  },\n  _spinDownHandler: function _spinDownHandler(e) {\n    e.preventDefault();\n\n    this._clearTimer();\n\n    eventsEngine.on(this.$element(), holdEvent.name, function () {\n      this._feedBackDeferred = new Deferred();\n      feedbackEvents.lock(this._feedBackDeferred);\n\n      this._spinChangeHandler({\n        event: e\n      });\n\n      this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {\n        event: e\n      });\n    }.bind(this));\n    var document = domAdapter.getDocument();\n    eventsEngine.on(document, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));\n    eventsEngine.on(document, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));\n\n    this._spinChangeHandler({\n      event: e\n    });\n  },\n  _dispose: function _dispose() {\n    this._clearTimer();\n\n    this.callBase();\n  },\n  _clearTimer: function _clearTimer() {\n    eventsEngine.off(this.$element(), holdEvent.name);\n    var document = domAdapter.getDocument();\n    eventsEngine.off(document, POINTERUP_EVENT_NAME);\n    eventsEngine.off(document, POINTERCANCEL_EVENT_NAME);\n\n    if (this._feedBackDeferred) {\n      this._feedBackDeferred.resolve();\n    }\n\n    if (this._holdTimer) {\n      clearInterval(this._holdTimer);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onChange\":\n      case \"direction\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = SpinButton;"],"sourceRoot":""}