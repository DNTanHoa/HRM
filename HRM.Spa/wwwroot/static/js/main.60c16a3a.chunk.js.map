{"version":3,"sources":["serviceWorker.js","index.js","modules.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","react","app_player_react","appConfigSource","device","host","origin","urlJson","appConfigUrl","search","substring","length","fetch","then","response","Promise","resolve","reject","json","result","catch","statusText","appConfig","errorMessage","Message","undefined","Error","patchAppConfig","modules","onLoaded","completeProgress","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECwCNC,SACIC,EAAA,cAACC,EAAA,EAAD,CAAKC,gBAzCT,SAAyBC,GACrB,IAAIC,EAAOT,OAAOC,SAASS,OACNC,IAWrB,IAAIC,EAAeH,EAAO,2BAA6BA,EAAO,WAAaD,EAI3E,OAHGR,OAAOC,SAASY,SACfD,GAAgB,IAAMZ,OAAOC,SAASY,OAAOC,UAAU,EAAGd,OAAOC,SAASY,OAAOE,SAE9EC,MAAMJ,GAAcK,KAAK,SAACC,GAC7B,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACzBH,EAASI,OAAOL,KAAK,SAACM,GAClBH,EAAQG,KAElBC,MAAM,WACIH,EAAOH,EAASO,kBAG1BR,KAAK,SAACS,GACJ,IACIC,EAAeD,EAAUE,QAC7B,QAAoBC,IAAjBF,EACA,MAAM,IAAIG,MAAMH,GAInB,OAFaI,YAAevB,EAAQkB,EAAUlB,GAASC,EAAO,OAG/De,MAAM,SAACG,GACN,MAAM,IAAIG,MAAMH,MAKmBK,QC1D5B,GD0D8CC,SAAUjC,OAAOkC,mBAC1EC,SAASC,eAAe,SDqEtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.60c16a3a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport \"core-js/fn/array/find-index\";\r\nimport \"core-js/fn/array/find\"\r\n\r\nimport { App } from \"app-player-react\";\r\nimport { patchAppConfig } from \"xaf-app-module\";\r\n\r\nimport modules from \"./modules\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport * as urlJson from './url.json';\r\n\r\n// Uncomment and grab value for update app-configs.json\r\n//import * as mainDemo from \"./configs/app\";\r\n//var mainDemoJson = JSON.stringify(mainDemo.mainDemoConfigs);\r\n\r\nfunction appConfigSource(device) {\r\n    let host = window.location.origin;\r\n    let applicationUrl = urlJson.applicationUrl\r\n\r\n    let publicUrl = process.env.PUBLIC_URL;\r\n    if (publicUrl) {\r\n        host = publicUrl;\r\n    }\r\n\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        host = applicationUrl.substring(0, applicationUrl.length - 1);\r\n    }\r\n\r\n    let appConfigUrl = host + \"/metadata/appconfig?url=\" + host + \"&device=\" + device;\r\n    if(window.location.search){\r\n        appConfigUrl += '&' + window.location.search.substring(1, window.location.search.length);\r\n    }\r\n    return fetch(appConfigUrl).then((response) => {\r\n        return new Promise((resolve, reject) => {\r\n            response.json().then((result) => {\r\n                resolve(result); \r\n            })\r\n\t    .catch(() => {\r\n                reject(response.statusText);\r\n            });\r\n\t});\r\n   }).then((appConfig) => {\r\n        let result = undefined;\r\n        let errorMessage = appConfig.Message;\r\n        if(errorMessage !== undefined) {\r\n           throw new Error(errorMessage);\r\n        } else {\r\n            result = patchAppConfig(device, appConfig[device], host + '/');\r\n        }\r\n        return result;\r\n    }).catch((errorMessage) => {\r\n        throw new Error(errorMessage);\r\n    });\r\n}\r\n\r\nReactDOM.render(\r\n    <App appConfigSource={appConfigSource} modules={modules} onLoaded={window.completeProgress} />,\r\n    document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\n\r\n// unregister() to register() below. Note this comes with some pitfalls.\n\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\r\nserviceWorker.unregister(); \r\n","// import chart from \"app-player-chart\";\r\nexport default {\r\n    // static import (included in main.*.js)    \r\n    // chart: chart \r\n    // dynamic import (included in chun.*.jsk)\r\n    // chart: () => \"app-player-chart\" \r\n};"],"sourceRoot":""}